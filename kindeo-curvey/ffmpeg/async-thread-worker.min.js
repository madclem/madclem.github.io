/* eslint-disable */
!(function (e, r) {
  "object" == typeof exports && "object" == typeof module
    ? (module.exports = r())
    : "function" == typeof define && define.amd
    ? define([], r)
    : "object" == typeof exports
    ? (exports.AsyncThreadWorker = r())
    : (e.AsyncThreadWorker = r());
})("undefined" != typeof self ? self : this, function () {
  return (() => {
    var e = (e, r, t) => {
        t.d(r, { default: () => d });
        function n(e, r) {
          return (
            (function (e) {
              if (Array.isArray(e)) return e;
            })(e) ||
            (function (e, r) {
              var t =
                null == e
                  ? null
                  : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                    e["@@iterator"];
              if (null == t) return;
              var n,
                o,
                s = [],
                i = !0,
                a = !1;
              try {
                for (
                  t = t.call(e);
                  !(i = (n = t.next()).done) &&
                  (s.push(n.value), !r || s.length !== r);
                  i = !0
                );
              } catch (e) {
                (a = !0), (o = e);
              } finally {
                try {
                  i || null == t.return || t.return();
                } finally {
                  if (a) throw o;
                }
              }
              return s;
            })(e, r) ||
            (function (e, r) {
              if (!e) return;
              if ("string" == typeof e) return o(e, r);
              var t = Object.prototype.toString.call(e).slice(8, -1);
              "Object" === t && e.constructor && (t = e.constructor.name);
              if ("Map" === t || "Set" === t) return Array.from(e);
              if (
                "Arguments" === t ||
                /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
              )
                return o(e, r);
            })(e, r) ||
            (function () {
              throw new TypeError(
                "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            })()
          );
        }
        function o(e, r) {
          (null == r || r > e.length) && (r = e.length);
          for (var t = 0, n = new Array(r); t < r; t++) n[t] = e[t];
          return n;
        }
        function s(e, r) {
          if (!(e instanceof r))
            throw new TypeError("Cannot call a class as a function");
        }
        function i(e, r) {
          for (var t = 0; t < r.length; t++) {
            var n = r[t];
            (n.enumerable = n.enumerable || !1),
              (n.configurable = !0),
              "value" in n && (n.writable = !0),
              Object.defineProperty(e, n.key, n);
          }
        }
        function a(e, r, t) {
          return (
            r && i(e.prototype, r),
            t && i(e, t),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            e
          );
        }
        var u = "0.9.4",
          c = (function () {
            function e(r) {
              var n = this,
                o =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : { isNode: !1 };
              if (
                (s(this, e),
                console.info("AsyncThreadWorker.ThreadWorker ".concat(u)),
                (this._isNode = o.isNode),
                (this._worker = r),
                this._isNode)
              ) {
                var i = t.g.require("worker_threads"),
                  a = i.parentPort;
                (this._parentPort = a),
                  a.on("message", function (e) {
                    return n._onMessage(e);
                  });
              } else
                r.onmessage = function (e) {
                  return n._onMessage(e.data);
                };
              this.onCreate(o);
            }
            return (
              a(e, [
                { key: "onCreate", value: function (e) {} },
                {
                  key: "_onMessage",
                  value: function (e) {
                    var r = e.id,
                      t = e.data;
                    this.onRequest(r, t);
                  },
                },
                { key: "onRequest", value: function (e, r) {} },
                {
                  key: "_sendResponse",
                  value: function (e, r) {
                    var t =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : {},
                      n = { transferables: [], error: void 0 },
                      o = Object.assign({}, n, t),
                      s = o.error,
                      i = this._isNode ? this._parentPort : this._worker;
                    i.postMessage(
                      { id: e, result: { data: r, error: s } },
                      o.transferables.length > 0 ? o.transferables : void 0
                    );
                  },
                },
                {
                  key: "sendResponse",
                  value: function (e) {
                    var r =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : void 0,
                      t =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : [];
                    this._sendResponse(e, r, { transferables: t });
                  },
                },
                {
                  key: "sendError",
                  value: function (e, r) {
                    this._sendResponse(e, void 0, { error: r });
                  },
                },
              ]),
              e
            );
          })(),
          l = (function () {
            function e(r) {
              var n,
                o = this,
                i =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : { isNode: !1, optsNode: void 0 };
              if (
                (s(this, e),
                console.info("AsyncThreadWorker.Thread ".concat(u)),
                (this._isNode = i.isNode),
                this._isNode)
              ) {
                var a = t.g.require("worker_threads"),
                  c = a.Worker;
                n = new c(r, i.optsNode);
              } else {
                try {
                  n = new Worker(r);
                } catch (e) {
                  console.log("error", e);
                }
              }
              (this._worker = n),
                (this._rrRequest = {}),
                this._isNode
                  ? (n.on("message", function (e) {
                      return o._onMessage(e);
                    }),
                    n.on("error", function (e) {
                      return o._onError(e);
                    }))
                  : ((n.onmessage = function (e) {
                      return o._onMessage(e.data);
                    }),
                    (n.onerror = function (e) {
                      return o._onError(e.data);
                    }));
            }
            return (
              a(e, [
                {
                  key: "_onMessage",
                  value: function (e) {
                    var r = e.id,
                      t = e.result,
                      n = t.data,
                      o = t.error;
                    if (r in this._rrRequest) {
                      var s = this._rrRequest[r],
                        i = s.res,
                        a = s.rej;
                      delete this._rrRequest[r], o ? a(o) : i(n);
                    }
                  },
                },
                {
                  key: "_onError",
                  value: function (e) {
                    this._cancelPendingRequests();
                  },
                },
                {
                  key: "_sendRequest",
                  value: function (e) {
                    var r = this,
                      t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : {},
                      n = { transferables: [] },
                      o = Object.assign({}, n, t);
                    return new Promise(function (t, n) {
                      var s;
                      do {
                        s = "req-id-".concat(Math.random());
                      } while (s in r._rrRequest);
                      (r._rrRequest[s] = { res: t, rej: n }),
                        r._worker &&
                          r._worker.postMessage(
                            { id: s, data: e },
                            o.transferables.length > 0
                              ? o.transferables
                              : void 0
                          );
                    });
                  },
                },
                {
                  key: "sendRequest",
                  value: function () {
                    var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0,
                      r =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : [];
                    return this._sendRequest(e, { transferables: r });
                  },
                },
                {
                  key: "getWorker",
                  value: function () {
                    return this._worker;
                  },
                },
                {
                  key: "_cancelPendingRequests",
                  value: function () {
                    var e = this,
                      r = 0;
                    if (
                      (Object.entries(this._rrRequest).forEach(function (t) {
                        var o = n(t, 2),
                          s = o[0];
                        o[1].rej("canceled: ".concat(s)),
                          delete e._rrRequest[s],
                          (r += 1);
                      }),
                      "_cancelPendingRequests(): canceled ".concat(
                        r,
                        " req(s)"
                      ),
                      0 !== Object.keys(this._rrRequest).length)
                    )
                      throw "panic: the rr map should have been cleared!";
                  },
                },
                {
                  key: "terminate",
                  value: function () {
                    this._cancelPendingRequests();
                    var e = null;
                    return (
                      this._isNode
                        ? (e = this._worker.terminate())
                        : this._worker.terminate(),
                      (this._worker = null),
                      e || void 0
                    );
                  },
                },
              ]),
              e
            );
          })();
        const d = { ThreadWorker: c, Thread: l };
      },
      r = {
        d: (e, t) => {
          for (var n in t)
            r.o(t, n) &&
              !r.o(e, n) &&
              Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
        },
      };
    (r.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (e) {
        if ("object" == typeof window) return window;
      }
    })()),
      (r.o = (e, r) => Object.prototype.hasOwnProperty.call(e, r));
    var t = {};
    return e(0, t, r), (t = t.default);
  })();
});
